Description: Various regexp fixes.
Author: Mike Gabriel <mike.gabriel@das-netzwerkteam.de>
Forwarded: pending, upstream maintainer is MIA

--- a/Onboard/LayoutLoaderSVG.py
+++ b/Onboard/LayoutLoaderSVG.py
@@ -95,7 +95,7 @@
         self._layout_filename = ""
         self._color_scheme = None
         self._root_layout_dir = ""  # path to svg files
-        self._layout_regex = re.compile("([^\(]+) (?: \( ([^\)]*) \) )?",
+        self._layout_regex = re.compile(r"([^\(]+) (?: \( ([^\)]*) \) )?",
                                         re.VERBOSE)
 
     def load(self, vk, layout_filename, color_scheme):
--- a/Onboard/WordSuggestions.py
+++ b/Onboard/WordSuggestions.py
@@ -1250,8 +1250,8 @@
                 return word_span
         return None
 
-    _section_begin_pattern = re.compile("\S*\s*$")
-    _section_end_pattern = re.compile("\S*(?=\s*)")
+    _section_begin_pattern = re.compile(r"\S*\s*$")
+    _section_end_pattern = re.compile(r"\S*(?=\s*)")
 
     def _get_section_before_span(self, insertion_span):
         """
--- a/Onboard/SpellChecker.py
+++ b/Onboard/SpellChecker.py
@@ -321,7 +321,7 @@
     def is_running(self):
         return not self._osk_hunspell is None
 
-    SPLITWORDS = re.compile("[^-_\s]+", re.UNICODE|re.DOTALL)
+    SPLITWORDS = re.compile(r"[^-_\s]+", re.UNICODE|re.DOTALL)
 
     def query(self, text):
         """
--- a/Onboard/TextDomain.py
+++ b/Onboard/TextDomain.py
@@ -141,7 +141,7 @@
 
         # Split at whitespace to catch whole URLs/file names and
         # keep separators.
-        strings = re.split('(\s+)', context)
+        strings = re.split(r'(\s+)', context)
         if strings:
             string = strings[-1]
             if self._url_parser.is_maybe_url(string):
@@ -174,17 +174,17 @@
         >>> with open(fn2, mode="w") as f: n = f.write("")
 
         # simple file in dir with spaces must return as filename
-        >>> strings = re.split('(\s+)', fn1)
+        >>> strings = re.split(r'(\\s+)', fn1)
         >>> "/test onboard" in d._search_valid_file_name(strings)
         True
 
         # file with spaces in dir with spaces must return as filename
-        >>> strings = re.split('(\s+)', fn2)
+        >>> strings = re.split(r'(\\s+)', fn2)
         >>> "/test onboard" in d._search_valid_file_name(strings)
         True
 
         # random string after a valid file must not be confused with a filename
-        >>> strings = re.split('(\s+)', fn2 + " no-file")
+        >>> strings = re.split(r'(\\s+)', fn2 + " no-file")
         >>> d._search_valid_file_name(strings) is None
         True
         """
@@ -288,7 +288,7 @@
     def handle_key_press(self, keycode, mod_mask):
         return True, None  # entering_text, end_of_editing
 
-    _growth_sections_pattern = re.compile("[^\s?#@]+", re.DOTALL)
+    _growth_sections_pattern = re.compile(r"[^\s?#@]+", re.DOTALL)
 
     def _split_growth_sections(self, text):
         """
@@ -442,21 +442,21 @@
 
     _prompt_patterns = tuple(re.compile(p, re.UNICODE) for p in
                                 (
-                                    "^gdb$ ",
-                                    "^>>> ",              # python
-                                    "^In \[[0-9]*\]: ",   # ipython
-                                    "^:",                 # vi command mode
-                                    "^/",                 # vi search
-                                    "^\?",                # vi reverse search
-                                    "\$ ",                # generic prompt
-                                    "# ",                 # root prompt
-                                    "^.*?@.*?/.*?> "      # fish
+                                    r"^gdb$ ",
+                                    r"^>>> ",              # python
+                                    r"^In \[[0-9]*\]: ",   # ipython
+                                    r"^:",                 # vi command mode
+                                    r"^/",                 # vi search
+                                    r"^\?",                # vi reverse search
+                                    r"\$ ",                # generic prompt
+                                    r"# ",                 # root prompt
+                                    r"^.*?@.*?/.*?> "      # fish
                                 )
                             )
 
     _prompt_blacklist_patterns = tuple(re.compile(p, re.UNICODE) for p in
                                 (
-                                    "^\(.*\)`.*': ",  # bash incremental search
+                                    r"^\(.*\)`.*': ",  # bash incremental search
                                 )
                             )
 
@@ -736,7 +736,7 @@
     _protocols = ["mailto", "apt"]
     _all_schemes = _schemes + _protocols
 
-    _url_pattern = re.compile("([\w-]+)|(\W+)", re.UNICODE)
+    _url_pattern = re.compile(r"([\w-]+)|(\W+)", re.UNICODE)
 
     def iter_url(self, url):
         return self._url_pattern.finditer(url)
--- a/Onboard/test/test_gui.py
+++ b/Onboard/test/test_gui.py
@@ -894,8 +894,8 @@
                 tw = self.TextWindow()
                 with self._run_onboard() as instance:
                     groups = [m.groups() for m
-                              in re.finditer("(?: \[ ([^\]]*) ) |"
-                                             "(?: \] ([^\[]*) )",
+                              in re.finditer(r"(?: \[ ([^\]]*) ) |"
+                                             r"(?: \] ([^\[]*) )",
                                              challenge, re.VERBOSE)]
                     for key_id, text in groups:
                         if key_id:
